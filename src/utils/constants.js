export const WORKFLOW_STEPS = [
  { id: "api_input", label: "Getting Started", icon: "fa-key", color: "#6c757d" },
  { id: "user_stories", label: "User Stories", icon: "fa-clipboard-list", color: "#4CAF50" },
  { id: "design_docs", label: "Design Docs", icon: "fa-drafting-compass", color: "#FF9800" },
  { id: "code_generation", label: "Code Generation", icon: "fa-code", color: "#9C27B0" },
  { id: "code_review", label: "Code Review", icon: "fa-search-plus", color: "#00BCD4" },
  { id: "test_cases", label: "Test Cases", icon: "fa-vial", color: "#8BC34A" },
  { id: "deployment", label: "Deployment Plan", icon: "fa-rocket", color: "#E91E63" }
];

export const PROMPT_TEMPLATES = {
  "user_stories": "Generate a comprehensive and detailed set of user stories for a project described as: '{prompt}'. For each user story, include a title, user role, goal, and detailed acceptance criteria following the 'Given-When-Then' format. Group stories by epic or feature where applicable.",
  "design_docs": "Create a functional and technical design document for: '{prompt}'. The functional section should include user flows and detailed feature specifications. The technical section should propose a system architecture, recommend a technology stack, and define the data models with fields and relationships.",
  "code_generation": "Generate a complete, fully functional HTML prototype/application for: '{prompt}'. Create a comprehensive single-file HTML document that includes: 1) **Complete HTML Structure** - All necessary semantic HTML elements, forms, navigation, content sections. 2) **Advanced Styling** - Beautiful responsive design using Tailwind CSS classes (loaded from CDN), custom CSS for animations, gradients, and modern UI patterns. 3) **Functional JavaScript** - Interactive features, form handling, data management, local storage integration, API simulation, dynamic content updates, event handlers, and user interactions. 4) **Modern Features** - Progressive enhancement, accessibility features, responsive design, smooth animations, loading states, error handling. 5) **Working Prototype** - All buttons, forms, navigation, and interactive elements should be fully functional with realistic data and workflows. The application should be production-ready in terms of functionality and user experience. Provide only the raw HTML code without any markdown formatting. Return the complete HTML document starting with <!DOCTYPE html> and ending with </html>.",
  "code_review": "Act as a senior software engineer and perform a thorough code review on the following HTML/CSS/JavaScript code:\n\n```html\n{generatedCode}\n```\n\nProvide a comprehensive code review including: 1) **Code Quality Analysis** - Structure, readability, maintainability, and best practices, 2) **Performance Issues** - Identify potential bottlenecks, inefficient code, and optimization opportunities, 3) **Security Vulnerabilities** - Check for XSS, CSRF, input validation, and other security concerns, 4) **Accessibility Issues** - WCAG compliance, semantic HTML, keyboard navigation, screen reader support, 5) **Browser Compatibility** - Cross-browser issues and modern web standards, 6) **Best Practices** - Code organization, naming conventions, documentation, 7) **Suggestions for Improvement** - Specific actionable recommendations with code examples where applicable. Rate each section from 1-10 and provide an overall code quality score.",
  "test_cases": "Create a detailed set of test cases for the project: '{prompt}'. Include a mix of unit tests, integration tests, and end-to-end tests. For each test case, provide a test ID, a description, steps to reproduce, expected results, and define if it's a positive or negative test.",
  "deployment": "Create a detailed, step-by-step deployment plan for the application: '{prompt}'. The plan should cover pre-deployment checks, environment setup, deployment strategy (e.g., blue-green), the deployment process itself, and a comprehensive rollback strategy in case of failure."
};
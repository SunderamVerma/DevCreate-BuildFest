import React, { useRef, useEffect, useState, useCallback } from 'react';
import { Editor } from '@monaco-editor/react';

const AdvancedCodeEditor = ({ 
  value = '', 
  onChange,
  language = 'html',
  theme = 'vs-dark',
  height = '400px',
  readOnly = false
}) => {
  const editorRef = useRef(null);
  const [isFullscreen, setIsFullscreen] = useState(false);

  // Default content if value is empty
  const defaultContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Project</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome to your generated project!</h1>
        <p>This is a sample project generated by the SDLC Assistant.</p>
        <p>Edit the code in the editor to customize your project.</p>
    </div>
    
    <script>
        console.log('Project loaded successfully!');
    </script>
</body>
</html>`;

  const editorValue = value && value.trim() ? value : defaultContent;

  const handleEditorDidMount = useCallback((editor, monaco) => {
    editorRef.current = editor;

    // Configure Monaco Editor settings
    monaco.editor.setTheme(theme);
    
    // Force layout to ensure proper sizing
    setTimeout(() => {
      editor.layout();
    }, 100);
    
    // Add custom key bindings
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {
      console.log('Save triggered');
    });

    // Enhanced IntelliSense for HTML
    monaco.languages.registerCompletionItemProvider('html', {
      provideCompletionItems: (model, position) => {
        const suggestions = [
          {
            label: 'div',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: '<div class="$1">$2</div>',
            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
            documentation: 'HTML div element with class'
          },
          {
            label: 'button',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: '<button onclick="$1">$2</button>',
            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
            documentation: 'HTML button with onclick handler'
          },
          {
            label: 'script-tag',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: '<script>\n\t$1\n</script>',
            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
            documentation: 'HTML script tag'
          }
        ];
        return { suggestions };
      }
    });

    // Enhanced IntelliSense for CSS
    monaco.languages.registerCompletionItemProvider('css', {
      provideCompletionItems: (model, position) => {
        const suggestions = [
          {
            label: 'flexbox-center',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: 'display: flex;\njustify-content: center;\nalign-items: center;',
            documentation: 'Flexbox centering'
          },
          {
            label: 'grid-layout',
            kind: monaco.languages.CompletionItemKind.Snippet,
            insertText: 'display: grid;\ngrid-template-columns: $1;\ngap: $2;',
            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
            documentation: 'CSS Grid layout'
          }
        ];
        return { suggestions };
      }
    });
  }, [theme]);

  const handleFileChange = (value) => {
    if (onChange) {
      onChange(value || '');
    }
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };

  const handleKeydown = (e) => {
    if (e.key === 'Escape' && isFullscreen) {
      setIsFullscreen(false);
    }
  };

  // Add event listener for escape key
  useEffect(() => {
    if (isFullscreen) {
      document.addEventListener('keydown', handleKeydown);
      return () => document.removeEventListener('keydown', handleKeydown);
    }
  }, [isFullscreen]);

  // Force layout update when fullscreen changes
  useEffect(() => {
    if (editorRef.current) {
      setTimeout(() => {
        editorRef.current.layout();
      }, 100);
    }
  }, [isFullscreen]);

  if (isFullscreen) {
    return (
      <div className="fixed inset-0 z-50 bg-gray-900 flex flex-col">
        {/* Fullscreen Header */}
        <div className="flex items-center justify-between p-4 bg-gray-800 border-b border-gray-700">
          <div className="flex items-center gap-3">
            <i className="fas fa-code text-blue-400"></i>
            <h3 className="text-white font-semibold">Advanced Code Editor - Fullscreen</h3>
            <span className="text-gray-400 text-sm">({language.toUpperCase()})</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-gray-400 text-sm">Press ESC to exit fullscreen</span>
            <button
              onClick={toggleFullscreen}
              className="text-gray-400 hover:text-white transition-colors p-2 rounded hover:bg-gray-700"
              title="Exit fullscreen (ESC)"
            >
              <i className="fas fa-compress"></i>
            </button>
          </div>
        </div>
        
        {/* Fullscreen Editor */}
        <div className="flex-1 overflow-hidden">
          <Editor
            height="100%"
            language={language}
            value={editorValue}
            onChange={handleFileChange}
            onMount={handleEditorDidMount}
            theme={theme}
            loading={
              <div className="flex items-center justify-center h-full text-gray-400">
                <i className="fas fa-spinner fa-spin mr-2"></i>
                Loading Monaco Editor...
              </div>
            }
            options={{
              readOnly: readOnly,
              minimap: { enabled: true },
              fontSize: 16,
              lineNumbers: 'on',
              automaticLayout: true,
              suggestOnTriggerCharacters: true,
              quickSuggestions: true,
              wordWrap: 'on',
              formatOnType: true,
              formatOnPaste: true,
              autoIndent: 'advanced',
              bracketMatching: 'always',
              folding: true,
              foldingHighlight: true,
              foldingStrategy: 'auto',
              showFoldingControls: 'always',
              scrollBeyondLastLine: false,
              smoothScrolling: true,
              cursorStyle: 'line',
              cursorBlinking: 'blink',
              renderLineHighlight: 'all',
              selectOnLineNumbers: true,
              glyphMargin: true,
              contextmenu: true,
              mouseWheelZoom: true,
              multiCursorModifier: 'ctrlCmd',
              accessibilitySupport: 'auto',
              tabSize: 2,
              insertSpaces: true,
              detectIndentation: true,
              trimAutoWhitespace: true,
              acceptSuggestionOnCommitCharacter: true,
              acceptSuggestionOnEnter: 'on',
              snippetSuggestions: 'top'
            }}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="advanced-code-editor bg-gray-800 rounded-lg overflow-hidden border border-gray-700 h-full flex flex-col">
      {/* Header with fullscreen button */}
      <div className="flex items-center justify-between p-2 bg-gray-800 border-b border-gray-700">
        <div className="flex items-center gap-2 text-gray-400 text-sm">
          <i className="fas fa-code"></i>
          <span>{language.toUpperCase()}</span>
        </div>
        <button
          onClick={toggleFullscreen}
          className="text-gray-400 hover:text-white transition-colors p-1 rounded hover:bg-gray-700"
          title="Expand to fullscreen"
        >
          <i className="fas fa-expand"></i>
        </button>
      </div>
      
      {/* Editor Container */}
      <div className="flex-1 overflow-hidden">
        <Editor
        height={height === "100%" ? "100%" : height}
        language={language}
        value={editorValue}
        onChange={handleFileChange}
        onMount={handleEditorDidMount}
        theme={theme}
        loading={
          <div className="flex items-center justify-center h-full text-gray-400">
            <i className="fas fa-spinner fa-spin mr-2"></i>
            Loading Monaco Editor...
          </div>
        }
        options={{
          readOnly: readOnly,
          minimap: { enabled: true },
          fontSize: 14,
          lineNumbers: 'on',
          automaticLayout: true,
          suggestOnTriggerCharacters: true,
          quickSuggestions: true,
          wordWrap: 'on',
          formatOnType: true,
          formatOnPaste: true,
          autoIndent: 'advanced',
          bracketMatching: 'always',
          folding: true,
          foldingHighlight: true,
          foldingStrategy: 'auto',
          showFoldingControls: 'always',
          scrollBeyondLastLine: false,
          smoothScrolling: true,
          cursorStyle: 'line',
          cursorBlinking: 'blink',
          renderLineHighlight: 'all',
          selectOnLineNumbers: true,
          glyphMargin: true,
          contextmenu: true,
          mouseWheelZoom: true,
          multiCursorModifier: 'ctrlCmd',
          accessibilitySupport: 'auto',
          tabSize: 2,
          insertSpaces: true,
          detectIndentation: true,
          trimAutoWhitespace: true,
          acceptSuggestionOnCommitCharacter: true,
          acceptSuggestionOnEnter: 'on',
          snippetSuggestions: 'top',
          overviewRulerBorder: false,
          hideCursorInOverviewRuler: true
        }}
      />
    </div>
    </div>
  );
};

export default AdvancedCodeEditor;
